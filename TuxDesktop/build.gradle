plugins {
    id 'java-library'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.14'
}

configurations {
    shadeClasspath.extendsFrom(api)
    shadeClasspath.canBeResolved = true
    shadeClasspath.canBeConsumed = false
}

dependencies {
    api project(':core')
    api 'com.google.code.findbugs:jsr305:3.0.2'
    api 'net.sf.jopt-simple:jopt-simple:5.0.4'
    api 'org.jline:jline-terminal:3.22.0'
    api 'org.jline:jline-terminal-jansi:3.22.0'
    api 'org.jline:jline-reader:3.22.0'
    api 'org.fusesource.jansi:jansi:2.4.0'
    compileOnly 'net.sourceforge.java-gnome:java-gnome:4.1.3'
}

javafx {
    version = '17.0.7'
    modules = [ 'javafx.base', 'javafx.graphics', 'javafx.controls', 'javafx.fxml' ]
}

application.mainClass = 'tuxcalculator.desktop.Main'

processResources {
    from rootProject.file('LICENSE')
}

jar {
    dependsOn project(':core').jar
    archiveBaseName = rootProject.name
    archiveClassifier = 'desktop'
    manifest.attributes([
            'Main-Class': application.mainClass.get(),
            'Automatic-Module-Name': 'tuxcalculator',
            'Implementation-Version': project.version,
            'Class-Path': '/usr/share/java/gtk.jar'
    ])
    from(rootProject.fileTree('notices'), {
        into 'tuxcalculator/notices'
    })
}

task fatjar(type: Jar) {
    dependsOn jar
    archiveBaseName = rootProject.name
    archiveClassifier = 'fatjar'
    manifest = jar.manifest
    with jar
}
build.dependsOn fatjar

task configureFatJar {
    doLast {
        configurations.shadeClasspath.each { dep -> fatjar.from(project.zipTree(dep)) {
            exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'module-info.class', 'LICENSE*', 'NOTICE*', 'META-INF/LICENSE*', 'META-INF/NOTICE*'
            filesMatching('javafx/**') {
                throw new IllegalStateException("JavaFX should not appear in fatjar.")
            }
            duplicatesStrategy DuplicatesStrategy.INCLUDE
        }}
    }
    outputs.upToDateWhen { false }
}
fatjar.dependsOn configureFatJar

task sourcesJar(type: Jar) {
    archiveBaseName = rootProject.name
    archiveClassifier = 'sources'
    manifest = jar.manifest
    from sourceSets.main.allSource
    from project(':core').sourceSets.main.allSource
    from project(':core').sourceSets.dev.resources
}
build.dependsOn sourcesJar
